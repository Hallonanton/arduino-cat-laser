/*
  Cat laser tower - original idea from http://www.lafabriquediy.com/tutoriel/tour-laser-pour-chat-259/
  Created by Anton Pedersen 2017-07-23
*/

#include <Servo.h>

// Instantiating two servos
Servo x_servo;
Servo y_servo;

//Variables
bool debug = true;
float min_x = 70; //right
float max_x = 110; //left
float min_y = 0; //min angle
float max_y = 45; //max-angle
int min_freeze = 2000; //min time (ms) for laser to be still
int max_freeze = 5000; //max time (ms) for laser to be still
int movement_time = 1000; //total movement time (ms)
int movement_steps = 10; //number of steps to move during movement_time
float min_movement = 10; //Minimal angle movment for x and y servo

int x_pos = 90; //start position for x
int y_pos = 20; //start position for y

int rand_delay;
int movement_delay;
float x_old_pos = x_pos;
float y_old_pos = y_pos;
float x_new_pos;
float y_new_pos;
float x_speed;
float y_speed;

//Runs on start
void setup() {

  x_servo.attach(6);  // attaches the x servo on pin 6 to the servo object
  y_servo.attach(9);  // attaches the y servo on pin 9 to the servo object

  //Start laser
  pinMode (13, OUTPUT);
  digitalWrite (13, HIGH);  // switch on  the laser
  //digitalWrite (13, LOW);  // switch off  the laser

  //Set servo start-pos
  x_servo.write(x_pos);
  y_servo.write(y_pos);
}

//Runs continuously after setup() is done
void loop() {

  if ( debug ) {

    x_servo.write( 90 );
    y_servo.write( 0 );

  } else {

    x_servo.attach(6);  // attaches the x servo on pin 6 to the servo object
    y_servo.attach(9);  // attaches the y servo on pin 9 to the servo object

    //Variables
    rand_delay = random(min_freeze, (max_freeze + 1));

    x_new_pos = random(min_x, (max_x + 1));
    y_new_pos = random(min_y, (max_y + 1));

    //Functionality - Check for min-/max-movment

    //Check Y
    //If new y is inside min_movment zone
    if ( y_new_pos > (y_old_pos - min_movement) && y_new_pos < (y_old_pos + min_movement) ) {

      //If new y is smaller than min-movement zone
      if ( y_new_pos > (y_old_pos - min_movement) ) {

        y_new_pos = y_old_pos - min_movement;
        if ( y_new_pos < min_y ) {
          y_new_pos = min_y;
        }

        //Else new y is equal to or larger than old_pos
      } else {

        y_new_pos = y_old_pos + min_movement;
        if ( y_new_pos > max_y ) {
          y_new_pos = max_y;
        }

      }
    }

    //Check X
    //If new x is inside min_movment zone
    if ( x_new_pos > (x_old_pos - min_movement) && x_new_pos < (x_old_pos + min_movement) ) {

      //If new x is smaller than min-movement zone
      if ( x_new_pos > (x_old_pos - min_movement) ) {

        x_new_pos = x_old_pos - min_movement;
        if ( x_new_pos < min_x ) {
          x_new_pos = min_x;
        }

        //Else new x is equal to or larger than old_pos
      } else {

        x_new_pos = x_old_pos + min_movement;
        if ( x_new_pos > max_x ) {
          x_new_pos = max_x;
        }

      }
    }

    //Functionality - Move servos to new position with random speed
    x_pos = x_old_pos;
    y_pos = y_old_pos;
    movement_delay = movement_time / movement_steps;

    x_speed = (x_new_pos - x_old_pos) / movement_steps;
    y_speed = (y_new_pos - y_old_pos) / movement_steps;

    for (int i = 0; i < movement_steps; i++) {

      x_pos = x_pos + x_speed;
      y_pos = y_pos + y_speed;

      x_servo.write( x_pos );
      y_servo.write( y_pos );

      delay( movement_delay );
    }

    //Save for next loop
    x_old_pos = x_new_pos;
    y_old_pos = y_new_pos;

    //Detach to remove buzzing sound from the servo
    x_servo.detach();
    y_servo.detach();

    //Delay until next loop
    delay( rand_delay );

  }
}